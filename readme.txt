trick
    src > app > layout (สำหรับ route "/") จะทำการเรียก component จาก page

0. install project

    npx create-next-app@latest

    project name: next-auth-register-tutorial
    √ Would you like to use TypeScript? Yes
    √ Would you like to use ESLint? Yes
    √ Would you like to use Tailwind CSS? Yes
    √ Would you like to use `src/` directory? Yes
    √ Would you like to use App Router? (recommended) Yes
    √ Would you like to customize the default import alias (@/*)? No

    cd next-auth-register-tutorial
    code .
    npm i bcryptjs mongoose next-auth
    npm run dev
    แก้ไข globals.css

1. แก้ไข route("/")

    -src > app > layout.tsx

        import type { Metadata } from 'next'
        import { Inter } from 'next/font/google'
        import Navbar from '@/components/Navbar'
        import './globals.css'

        const inter = Inter({ subsets: ['latin'] })

        export const metadata: Metadata = {
        title: 'Create Next App',
        description: 'Generated by create next app',
        }

        export default function RootLayout({
        children,
        }: {
        children: React.ReactNode
        }) {
        return (
            <html lang="en">
            <body className={inter.className}>
                <div className='mx-auto max-w-5xl text-2xl gap-2 mb-10'>
                <Navbar/>
                {children}
                </div>
            </body>
            </html>
        )
        }

    -src > app > page.tsx

        import Image from 'next/image'

        export default function Home() {
        return (
            <div>Home page</div>
        )
        }

2. สร้าง src > components > Navbar.tsx ********สร้างใน src ไม่ใช่ app

    -src > components > Navbar.tsx

        import React from 'react'
        import Link from 'next/link'

        const Navbar = () => {
        return (
            <div>
                <ul className='flex justify-between m-10 item-center'>
                    <div>
                        <Link href="/">
                            <li>Home</li>
                        </Link>
                    </div>
                    <div className='flex gap-10'>
                        <Link href="dashboard">
                            <li>Dashboard</li>
                        </Link>
                        <Link href="login">
                            <li>Login</li>
                        </Link>
                        <Link href="register">
                            <li>Register</li>
                        </Link>
                    </div>
                </ul>
            </div>
        )
        }

        export default Navbar

3. สร้าง route ต่างๆ

    -app > dashboard > page.tsx

        import React from 'react'

        const DashboardPage = () => {
        return (
            <div>
            Dashboard page 
            </div>
        )
        }

        export default DashboardPage

    -app > login > page.tsx

        import React from 'react'

        const LoginPage = () => {
        return (
            <div>
            login page 
            </div>
        )
        }

        export default LoginPage

    -app > register > page.tsx

        import React from 'react'
        import Link from 'next/link'
        const RegisterPage = () => {
        return (
            <div className='flex min-h-screen flex-col items-center justify-between p-24'>
                <div className='p-8 rounded shadow-md 2-96'>
                    <h1 className='text-4xl text-center font-semibold mb-8'>Register</h1>
                    <form>
                        <input type="text" className='w-full border border-gray-300 text-black rounded px-3 py-2 mb-3 focus:border-blue-400 focus:text-black'
                            placeholder='test@example.com'
                            required
                        />
                        <input type="password" className='w-full border border-gray-300 text-black rounded px-3 py-2 mb-3 focus:border-blue-400 focus:text-black'
                            placeholder='Password'
                            required
                        />
                        <button type='submit' className='w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600'>Register</button>
                    </form>
                    <Link className='block text-center text-blue-500 hover:underline mt-2' href="/">Login with an existing account</Link>
                
                </div>
            </div>
        )
        }

        export default RegisterPage

4. mongodb

    new project > project name : next-auth-register > create project
    
    build database > free > aws > singapore > create
    
    setting > username : psworamet, password : psworamet123456 > create

    connect vsb > mongodb+srv://psworamet:<password>@cluster0.qlg3eoh.mongodb.net/

    create .env file

        -.env

            MONGO_URL=mongodb+srv://psworamet:psworamet123456@cluster0.qlg3eoh.mongodb.net/

    -utils > db.js ใช้สำหรับ connect database

        import mongoose, { mongo } from "mongoose";

        const connect = async () => {
            if(mongoose.connections[0].readyState){
                return;
            }
            try{
                await mongoose.connect(process.env.MONGO_URL, {
                    useNewUrlParser: true, useUnifiedTopology: true,
                });
                console.log("Mongo connection successfully established");
            }catch(error){
                throw new Error("Error connecting to Mongoose")
            }
        }

        export default connect;
    
    -model > user.js ใช้งาน mongoose schema

        import mongoose from "mongoose";

        const {Schema} = mongoose;

        const userSchema = new Schema(
            {
                email: {
                    type: String,
                    unique: true,
                    required: true,
                },
                password: {
                    type: String,
                    require: false,
                },
            },
            {timestamps: true}
        )

        export default mongoose.models.User || mongoose.model("User", userSchema)
    
    -api > register > route สร้าง route (/api/register) เมื่อมีการ register ให้ทำการ hash password ก่อนบันทึก database

        import User from '@/models/User'
        import connect from '@/utlis/db'
        import bcrypt from 'bcryptjs'
        import { NextResponse } from 'next/dist/server/web/spec-extension/response'

        export const POST = async (request: any) => {
            const {email, password} = await request.json();
            
            await connect();

            const existingUser = await User.findOne({email})

            if(existingUser){
                return new NextResponse("Email is already in use", {status: 400})
            }

            const hashedPassword = await bcrypt.hash(password, 5)
            const newUser = new User({
                email,
                password: hashedPassword
            })

            try{
                await newUser.save();
                return new NextResponse("user is registerd", {status: 200})
            }catch(err:any){
                return new NextResponse(err, {
                    status: 500,
                })
            }

        }

    -src > app > register > page.tsx ทำการเรียก route(/api/register) เมื่อกดปุ่ม register

        'use client'
        import React, { useState } from 'react'
        import Link from 'next/link'
        import { useRouter } from 'next/navigation'

        const RegisterPage = () => {

            const [error, setError] = useState("")
            const router = useRouter()

            const isValidEmail = (email: string) => {
                const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
                return emailRegex.test(email)
            }

            const handleSubmit = async (e:any) => {
                e.preventDefault();
                const email = e.target[0].value;
                const password = e.target[1].value;

                if(!isValidEmail(email)){
                    setError("Email is invalid")
                    return
                }

                console.log(password);
                
                if(!password || password.length < 8){
                    console.log("error pass len < 8");
                    
                    setError("Password is invalid")
                    return
                }

                try{
                    const res = await fetch("/api/register", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            email,
                            password
                        })
                    })
                    if(res.status === 400){
                        setError("this email is already registered")
                    }if(res.status === 200){
                        setError("")
                        router.push("/login")
                    }
                }catch(error){
                    setError("Error, try again")
                    console.log(error);
                    
                }
            }

        return (
            <div className='flex min-h-screen flex-col items-center justify-between p-24'>
                <div className='p-8 rounded shadow-md 2-96'>
                    <h1 className='text-4xl text-center font-semibold mb-8'>Register</h1>
                    <form onSubmit={handleSubmit}>
                        <p className='text-red-500 text-[16px] mb-4'>{error}</p>
                        <input type="text" className='w-full border border-gray-300 text-black rounded px-3 py-2 mb-3 focus:border-blue-400 focus:text-black'
                            placeholder='test@example.com'
                            required
                        />
                        <input type="password" className='w-full border border-gray-300 text-black rounded px-3 py-2 mb-3 focus:border-blue-400 focus:text-black'
                            placeholder='Password'
                            required
                        />
                        <button type='submit' className='w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600'>Register</button>
                    </form>
                    <Link className='block text-center text-blue-500 hover:underline mt-2' href="/">Login with an existing account</Link>
                
                </div>
            </div>
        )
        }

        export default RegisterPage

5. next-auth login
    
    npm install next-auth

    https://next-auth.js.org/getting-started/example

    -src > app > api > auth > [...nextauth] > route.ts

    -.env

        NEXTAUTH_URL="http://localhost:3000"
        NEXTAUTH_SECRET="psworametsecret"
    
    -utils > SessionProvider.ts

        'use client'
        import React from 'react'
        import { SessionProvider } from 'next-auth/react'

        const AuthProvider = ({children}:any) => {
        
        return (
            <SessionProvider>{children}</SessionProvider>
        )
        }

        export default AuthProvider

    -src > app > layout.tsx เพิ่ม AuthProvider
    
        import type { Metadata } from 'next'
        import { Inter } from 'next/font/google'
        import Navbar from '@/components/Navbar'
        import './globals.css'

        import {getServerSession} from 'next-auth'
        import AuthProvider from '@/utlis/SessionProvider'

        const inter = Inter({ subsets: ['latin'] })

        export const metadata: Metadata = {
        title: 'Create Next App',
        description: 'Generated by create next app',
        }

        export default async function RootLayout({
        children,
        }: {
        children: React.ReactNode
        }) {

        const session = await getServerSession();


        return (
            <html lang="en">
            <body className={inter.className}>
                <AuthProvider session={session}>
                    <div className='mx-auto max-w-5xl text-2xl gap-2 mb-10'>
                    <Navbar/>
                    {children}
                    </div>
                </AuthProvider>
            </body>
            </html>
        )
        }

    -src > app > login > page.tsx

        'use client'
        import React, { useState, useEffect } from 'react'
        import Link from 'next/link'
        import { useRouter } from 'next/navigation'
        import {signIn, useSession} from 'next-auth/react'

        const LoginPage = () => {
        
        const [error, setError] = useState("")
        const router = useRouter()

        const session = useSession();

        useEffect(()=> {
            if(session?.status === "authenticated"){
            router.replace("/dashboard")
            }
        }, [session, router])

        const isValidEmail = (email: string) => {
            const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
            return emailRegex.test(email)
        }

        const handleSubmit = async (e:any) => {
            e.preventDefault();
            const email = e.target[0].value;
            const password = e.target[1].value;

            if(!isValidEmail(email)){
                setError("Email is invalid")
                return
            }

            console.log(password);
            
            if(!password || password.length < 8){
                console.log("error pass len < 8");
                
                setError("Password is invalid")
                return
            }

            const res = await signIn("creadentials",{
                redirect: false,
                email,
                password
            })

            if(res?.error){
                setError("Invalid email or password")
                if(res?.url){
                router.replace("/dashboard")
                }else{
                setError("")
                }
            }
        }

        return (
        <div className='flex min-h-screen flex-col items-center justify-between p-24'>
            <div className='p-8 rounded shadow-md 2-96'>
                <h1 className='text-4xl text-center font-semibold mb-8'>Login</h1>
                <form onSubmit={handleSubmit}>
                    <p className='text-red-500 text-[16px] mb-4'>{error}</p>
                    <input type="text" className='w-full border border-gray-300 text-black rounded px-3 py-2 mb-3 focus:border-blue-400 focus:text-black'
                        placeholder='test@example.com'
                        required
                    />
                    <input type="password" className='w-full border border-gray-300 text-black rounded px-3 py-2 mb-3 focus:border-blue-400 focus:text-black'
                        placeholder='Password'
                        required
                    />
                    <button type='submit' className='w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600'>Login</button>
                </form>
                <Link className='block text-center text-blue-500 hover:underline mt-2' href="/register">Register here</Link>
            
            </div>
        </div>
        )
        }

        export default LoginPage

6. create logout

    -src > components > Navbar.tsx

        'use client'
        import React from 'react'
        import Link from 'next/link'
        import {signOut, useSession} from 'next-auth/react'

        const Navbar = () => {

        const {data:session}: any = useSession()

        return (
            <div>
                <ul className='flex justify-between m-10 item-center'>
                    <div>
                        <Link href="/">
                            <li>Home</li>
                        </Link>
                    </div>
                    <div className='flex gap-10'>
                        <Link href="dashboard">
                            <li>Dashboard</li>
                        </Link>
                        {!session ? (
                            <>
                                <Link href="login">
                                <li>Login</li>
                                </Link>
                                <Link href="register">
                                    <li>Register</li>
                                </Link>
                            </>
                        ):
                        <>
                            {session.user?.email}
                            <li>
                                <button onClick={()=>signOut()} className='p-2 px-5 bg-blue-800 rounded-full'>Logout</button>
                            </li>
                        </>
                        }
                        
                    </div>
                </ul>
            </div>
        )
        }

        export default Navbar

    -src > app > dashboard > page.tsx

        import React from 'react'
        import {getServerSession} from 'next-auth'
        import {redirect} from 'next/navigation'


        const DashboardPage = () => {

        const session = getServerSession()
        if(!session){
            redirect("/")
        }

        return (
            <div className='flex min-h-screen flex-col items-center justify-between p-24'>
            Dashboard page 
            </div>
        )
        }

        export default DashboardPage

7. protect route dashboard

    -src > app > dashboard > page.tsx

        import React from 'react'
        import {getServerSession} from 'next-auth'
        import {redirect} from 'next/navigation'

        const DashboardPage = async () => {

        const session = await getServerSession()
        if(!session){
            redirect("/")
        }

        return (
            <div className='flex min-h-screen flex-col items-center justify-between p-24'>
            Dashboard page 
            </div>
        )
        }

        export default DashboardPage

8. github auth
    
    https://github.com/settings/apps > OAuth Apps > register a new application

    Application name: nextjsAuth

    HomePage URL: http://localhost:3000/

    Application description: 

    Authorization callback URL: http://localhost:3000/api/auth/callback/github

    จะได้ client id: a207c3ccdc55e4f3e108
    และทำการ client secrets

    -.env เพิ่มใน file

        GITHUB_ID=a207c3ccdc55e4f3e108
        GITHUB_SECRET=

    -src > app > login > page.tsx

        'use client'
        import React, { useState, useEffect } from 'react'
        import Link from 'next/link'
        import { useRouter } from 'next/navigation'
        import {signIn, useSession} from 'next-auth/react'

        const LoginPage = () => {
        
        const [error, setError] = useState("")
        const router = useRouter()

        const session = useSession();

        useEffect(()=> {
            if(session?.status === "authenticated"){
            router.replace("/dashboard")
            }
        }, [session, router])

        const isValidEmail = (email: string) => {
            const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
            return emailRegex.test(email)
        }

        const handleSubmit = async (e:any) => {
            e.preventDefault();
            const email = e.target[0].value;
            const password = e.target[1].value;

            if(!isValidEmail(email)){
                setError("Email is invalid")
                return
            }

            console.log(password);
            
            if(!password || password.length < 8){
                console.log("error pass len < 8");
                
                setError("Password is invalid")
                return
            }

            const res = await signIn("creadentials",{
                redirect: false,
                email,
                password
            })

            if(res?.error){
                setError("Invalid email or password")
                if(res?.url){
                router.replace("/dashboard")
                }else{
                setError("")
                }
            }
        }

        return (
        <div className='flex min-h-screen flex-col items-center justify-between p-24'>
            <div className='p-8 rounded shadow-md 2-96'>
                <h1 className='text-4xl text-center font-semibold mb-8'>Login</h1>
                <form onSubmit={handleSubmit}>
                    <p className='text-red-500 text-[16px] mb-4'>{error}</p>
                    <input type="text" className='w-full border border-gray-300 text-black rounded px-3 py-2 mb-3 focus:border-blue-400 focus:text-black'
                        placeholder='test@example.com'
                        required
                    />
                    <input type="password" className='w-full border border-gray-300 text-black rounded px-3 py-2 mb-3 focus:border-blue-400 focus:text-black'
                        placeholder='Password'
                        required
                    />
                    <button type='submit' className='w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600'>Login</button>
                </form>
                <button className='w-full bg-black text-white py-2 my-2 rounded hover:bg-gray-800' onClick={() => {signIn("github")}}>Sign In with Github</button>
                <Link className='block text-center text-blue-500 hover:underline mt-2' href="/register">Register here</Link>
            
            </div>
        </div>
        )
        }

        export default LoginPage

9. callback next auth

    import NextAuth from "next-auth"
    import GithubProvider from "next-auth/providers/github"
    import CredentialsProvider from "next-auth/providers/credentials";
    import { Account, User as AuthUser } from "next-auth";
    import User from '@/models/User'
    import connect from "@/utlis/db";
    import bcrypt from 'bcryptjs'

    export const authOptions:any = {
        
    // Configure one or more authentication providers
    providers: [
        GithubProvider({
        clientId: process.env.GITHUB_ID??"",
        clientSecret: process.env.GITHUB_SECRET??"",
        }),

        CredentialsProvider({
            // The name to display on the sign in form (e.g. "Sign in with...")
            name: "Credentials",
            id: "creadentials",
            credentials: {
            email: { label: "Email", type: "text", placeholder: "jsmith" },
            password: { label: "Password", type: "password" }
            },
            async authorize(credentials:any, req) {
            await connect();
            try{
                const user = await User.findOne({email: credentials.email})
                if(user){
                    const isPasswordCorrect = await bcrypt.compare(credentials.password, user.password)
                    if(isPasswordCorrect){
                        return user;
                    }
                    else{
                        console.log('login error');
                        
                        return 
                    }
                }

            }catch(err:any){
                console.log('login fail');
                
                throw new Error(err)
            }
            }
        })
        
    ],
    callback: {
        async signIn({user, account}: {user: AuthUser, account: Account}){
        if(account?.provider == "credentials"){
            return true
        }
        if(account?.provider == "github"){
            await connect()
            try{
            const existingUser = await User.findOne({email: user.email});
            if(!existingUser){
                const newUser = new User({
                email: user.email
                })

                await newUser.save()
                return true
            }
            return true
            }catch(err){
            console.log("error saving user", err);
            return false
            
            }
        }
        }
    }
    }

    export const handler = NextAuth(authOptions)
    export {handler as GET, handler as POST}
    
10. protect route

    -src > app > login > page.tsx

        'use client'
        import React, { useState, useEffect } from 'react'
        import Link from 'next/link'
        import { useRouter } from 'next/navigation'
        import {signIn, useSession} from 'next-auth/react'

        const LoginPage = () => {
        
        const [error, setError] = useState("")
        const router = useRouter()

        // const session = useSession();
        const {data: session, status: sessionStatus} = useSession()

        useEffect(()=> {
            if(sessionStatus === "authenticated"){
            router.replace("/dashboard")
            }
        }, [sessionStatus, router])

        const isValidEmail = (email: string) => {
            const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
            return emailRegex.test(email)
        }

        const handleSubmit = async (e:any) => {
            e.preventDefault();
            const email = e.target[0].value;
            const password = e.target[1].value;

            if(!isValidEmail(email)){
                setError("Email is invalid")
                return
            }

            console.log(password);
            
            if(!password || password.length < 8){
                console.log("error pass len < 8");
                
                setError("Password is invalid")
                return
            }

            const res = await signIn("creadentials",{
                redirect: false,
                email,
                password
            })

            if(res?.error){
                setError("Invalid email or password")
                if(res?.url){
                router.replace("/dashboard")
                }else{
                setError("")
                }
            }
        }

        if(sessionStatus === 'loading'){
            return <h1>Loading...</h1>
        }

        return (
        
        sessionStatus !== 'authenticated' && (<div className='flex min-h-screen flex-col items-center justify-between p-24'>
            <div className='p-8 rounded shadow-md 2-96'>
                <h1 className='text-4xl text-center font-semibold mb-8'>Login</h1>
                <form onSubmit={handleSubmit}>
                    <p className='text-red-500 text-[16px] mb-4'>{error}</p>
                    <input type="text" className='w-full border border-gray-300 text-black rounded px-3 py-2 mb-3 focus:border-blue-400 focus:text-black'
                        placeholder='test@example.com'
                        required
                    />
                    <input type="password" className='w-full border border-gray-300 text-black rounded px-3 py-2 mb-3 focus:border-blue-400 focus:text-black'
                        placeholder='Password'
                        required
                    />
                    <button type='submit' className='w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600'>Login</button>
                </form>
                <button className='w-full bg-black text-white py-2 my-2 rounded hover:bg-gray-800' onClick={() => {signIn("github")}}>Sign In with Github</button>
                <Link className='block text-center text-blue-500 hover:underline mt-2' href="/register">Register here</Link>
            
            </div>
        </div>)
        )
        }

        export default LoginPage

    -src > app > register > page.tsx

        'use client'
        import React, { useEffect, useState } from 'react'
        import Link from 'next/link'
        import { useRouter } from 'next/navigation'
        import {useSession} from 'next-auth/react'

        const RegisterPage = () => {

            const [error, setError] = useState("")
            const router = useRouter()

            const {data: session, status: sessionStatus} = useSession()

            useEffect(()=> {
                if(sessionStatus === "authenticated"){
                router.replace("/dashboard")
                }
            }, [sessionStatus, router])

            const isValidEmail = (email: string) => {
                const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
                return emailRegex.test(email)
            }

            const handleSubmit = async (e:any) => {
                e.preventDefault();
                const email = e.target[0].value;
                const password = e.target[1].value;

                if(!isValidEmail(email)){
                    setError("Email is invalid")
                    return
                }

                console.log(password);
                
                if(!password || password.length < 8){
                    console.log("error pass len < 8");
                    
                    setError("Password is invalid")
                    return
                }

                try{
                    const res = await fetch("/api/register", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            email,
                            password
                        })
                    })
                    if(res.status === 400){
                        setError("this email is already registered")
                    }if(res.status === 200){
                        setError("")
                        router.push("/login")
                    }
                }catch(error){
                    setError("Error, try again")
                    console.log(error);
                    
                }
            }

            if(sessionStatus === 'loading'){
                return <h1>Loading...</h1>
            }

        return (
            sessionStatus !== 'authenticated' && (<div className='flex min-h-screen flex-col items-center justify-between p-24'>
                <div className='p-8 rounded shadow-md 2-96'>
                    <h1 className='text-4xl text-center font-semibold mb-8'>Register</h1>
                    <form onSubmit={handleSubmit}>
                        <p className='text-red-500 text-[16px] mb-4'>{error}</p>
                        <input type="text" className='w-full border border-gray-300 text-black rounded px-3 py-2 mb-3 focus:border-blue-400 focus:text-black'
                            placeholder='test@example.com'
                            required
                        />
                        <input type="password" className='w-full border border-gray-300 text-black rounded px-3 py-2 mb-3 focus:border-blue-400 focus:text-black'
                            placeholder='Password'
                            required
                        />
                        <button type='submit' className='w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600'>Register</button>
                    </form>
                    <Link className='block text-center text-blue-500 hover:underline mt-2' href="/">Login with an existing account</Link>
                
                </div>
            </div>)
        )
        }

        export default RegisterPage







    


     